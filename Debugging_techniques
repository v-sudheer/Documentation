Enabling Early Printk:
----------------------
Enable Low level debugging via 8250 UART in defconfig

-> Kernel hacking
 Kernel low-level debugging functions                            DEBUG_LL
 Kernel low-level debugging via 8250 UART                        DEBUG_LL_UART_8250
 Kernel low-level debugging via efm32 UART                       DEBUG_LL_UART_EFM32
 Kernel low-level debugging via ARM Ltd PL01x Primecell UART     DEBUG_LL_UART_PL01X
 
 Physical base address of debug UART                             DEBUG_UART_PHYS
 Virtual base address of debug UART                              DEBUG_UART_VIRT

defconfig [in AST2500 case] :
-----------------
+CONFIG_DEBUG_LL=y
+CONFIG_DEBUG_LL_UART_8250=y
+CONFIG_DEBUG_UART_PHYS=0x1e784000
+CONFIG_DEBUG_UART_VIRT=0xf8184000

setenv bootargs "console=ttyS4,115200n8 root=/dev/ram rw earlyprintk"

vsudheer@aspeed-fw:~/uart_sdma_merge/Linux_community_push_dir/linux$ cat diff_Early_printk_ast2500
diff --git a/arch/arm/Makefile b/arch/arm/Makefile
index 9db3c584b2cb..52cf3b98f4b4 100644
--- a/arch/arm/Makefile
+++ b/arch/arm/Makefile
@@ -201,6 +201,7 @@ machine-$(CONFIG_ARCH_OMAP2PLUS)    += omap2
 machine-$(CONFIG_ARCH_ORION5X)         += orion5x
 machine-$(CONFIG_ARCH_PICOXCELL)       += picoxcell
 machine-$(CONFIG_ARCH_PXA)             += pxa
+machine-$(CONFIG_ARCH_ASPEED)          += aspeed
 machine-$(CONFIG_ARCH_QCOM)            += qcom
 machine-$(CONFIG_ARCH_RDA)             += rda
 machine-$(CONFIG_ARCH_REALVIEW)                += realview
diff --git a/arch/arm/mach-aspeed/Makefile b/arch/arm/mach-aspeed/Makefile
new file mode 100644
index 000000000000..158ac7e6e947
--- /dev/null
+++ b/arch/arm/mach-aspeed/Makefile
@@ -0,0 +1,2 @@
+
+obj-y                          += aspeed_early_print.o
diff --git a/arch/arm/mach-aspeed/aspeed_early_print.c b/arch/arm/mach-aspeed/aspeed_early_print.c
new file mode 100644
index 000000000000..c23aa9913a31
--- /dev/null
+++ b/arch/arm/mach-aspeed/aspeed_early_print.c
@@ -0,0 +1,27 @@
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/tty.h>
+
+extern void power_putstr(const char *ptr);
+void fb_printf(const char *fmt, ...)
+{
+       static char buf[1024];
+       va_list args;
+       int r;
+
+       va_start(args, fmt);
+
+       r = vsnprintf(buf, sizeof(buf), fmt, args);
+       power_putstr(buf);
+
+       va_end(args);
+
+}
+
+int fb_initialized = 0;
+
+void fb_init(void)
+{
+       fb_initialized = 1;
+}
+
diff --git a/init/main.c b/init/main.c
index c86a1c8f19f4..7b8dbe2f33c1 100644
--- a/init/main.c
+++ b/init/main.c
@@ -534,15 +534,55 @@ void __init __weak arch_call_rest_init(void)
        rest_init();
 }

+
+void __iomem *uart_base = (void*)CONFIG_DEBUG_UART_VIRT;
+#define SERIAL_LSR_THRE 0x20 /* THR Empty */
+#define SERIAL_LSR 0x14
+#define SERIAL_THR 0x00
+static void
+power_putc(const char c)
+{
+       volatile unsigned int status=0;
+#ifdef CONFIG_MACH_PILOT4
+       return;//It may be causing some spurious interrupts
+#endif
+       /* Wait for Ready */
+       do
+       {
+       status = *(volatile unsigned int*)(uart_base+SERIAL_LSR);
+       }
+       while (!((status & SERIAL_LSR_THRE)==SERIAL_LSR_THRE) );
+
+       /* Write Character */
+       *(volatile unsigned int*)(uart_base+SERIAL_THR) = c;
+return;
+}
+
+void power_putstr(const char *ptr)
+{
+       char c;
+
+       while ((c = *ptr++) != '\0') {
+               if (c == '\n')
+                       power_putc('\r');
+               power_putc(c);
+       }
+}
+
+
 asmlinkage __visible void __init start_kernel(void)
 {
        char *command_line;
        char *after_dashes;

+       power_putstr("In start kernel \n");
        set_task_stack_end_magic(&init_task);
+       power_putstr("In start kernel \n");
        smp_setup_processor_id();
+       power_putstr("In start kernel \n");
        debug_objects_early_init();

+       power_putstr("In start kernel \n");
        cgroup_init_early();

        local_irq_disable();
diff --git a/kernel/printk/printk.c b/kernel/printk/printk.c
index d3d170374ceb..0a0c55439255 100644
--- a/kernel/printk/printk.c
+++ b/kernel/printk/printk.c
@@ -1961,6 +1961,8 @@ int vprintk_default(const char *fmt, va_list args)
 }
 EXPORT_SYMBOL_GPL(vprintk_default);

+extern void fb_printf(const char *fmt, ...);
+
 /**
  * printk - print a kernel message
  * @fmt: format string
@@ -1986,9 +1988,22 @@ asmlinkage __visible int printk(const char *fmt, ...)
 {
        va_list args;
        int r;
+       static /*const */char prefix[] = "[Shi] ";
+       static char buf[1024] = "\n";

        va_start(args, fmt);
-       r = vprintk_func(fmt, args);
+
+       if (1) {
+               /*(LSU) Prefix only if previous line was ended */
+               if(buf[strlen(buf)-1] == '\n')
+                       fb_printf("%s", prefix);
+
+               r = vsnprintf(buf, sizeof(buf), fmt, args);
+
+               fb_printf("%s", buf);
+
+       } else
+               r = vprintk_func(fmt, args);
        va_end(args);

        return r;
vsudheer@aspeed-fw:~/uart_sdma_merge/Linux_community_push_dir/linux$



Understand Image Layout :
----------------------------------

20080000   ---- ??

kernel :   (Data Start in RAM)0x2008012c    0x80001000 (Load Address)
            copy (Data Size:2709768 Bytes = 2.6 MiB)
            
            entry point --> 0x80001000

ramdisk :   0x2031cb9c ----->

fdt :  0x20315b3c   -----> 



  Booting using the fdt blob at 0x20315b3c
   Loading Kernel Image ... OK
   Loading Ramdisk to 9ea16000, end 9eb9a0b7 ... OK
   Loading Device Tree to 9ea0c000, end 9ea15f9e ... OK


ast# boot
## Loading kernel from FIT Image at 20080000 ...
   Using 'conf@aspeed-ast2500-evb.dtb' configuration
   Trying 'kernel@1' kernel subimage
     Description:  Linux kernel
     Type:         Kernel Image
     Compression:  uncompressed
     Data Start:   0x2008012c
     Data Size:    2709768 Bytes = 2.6 MiB
     Architecture: ARM
     OS:           Linux
     Load Address: 0x80001000
     Entry Point:  0x80001000
     Hash algo:    sha1
     Hash value:   cc4d358cd27fca5341bf1f4060d058f4aee57ea9
   Verifying Hash Integrity ... sha1+ OK
## Loading ramdisk from FIT Image at 20080000 ...
   Using 'conf@aspeed-ast2500-evb.dtb' configuration
   Trying 'ramdisk@1' ramdisk subimage
     Description:  obmc-phosphor-initramfs
     Type:         RAMDisk Image
     Compression:  lzma compressed
     Data Start:   0x2031cb9c
     Data Size:    1589431 Bytes = 1.5 MiB
     Architecture: ARM
     OS:           Linux
     Load Address: unavailable
     Entry Point:  unavailable
     Hash algo:    sha1
     Hash value:   15f33d975cae6d4bac54f15b9677eaeaa3f7d450
   Verifying Hash Integrity ... sha1+ OK
## Loading fdt from FIT Image at 20080000 ...
   Using 'conf@aspeed-ast2500-evb.dtb' configuration
   Trying 'fdt@aspeed-ast2500-evb.dtb' fdt subimage
     Description:  Flattened Device Tree blob
     Type:         Flat Device Tree
     Compression:  uncompressed
     Data Start:   0x20315b3c
     Data Size:    28575 Bytes = 27.9 KiB
     Architecture: ARM
     Hash algo:    sha1
     Hash value:   c935c4eb717632edd728ef3cf76d0f2bd7ba8cb7
   Verifying Hash Integrity ... sha1+ OK
   Booting using the fdt blob at 0x20315b3c
   Loading Kernel Image ... OK
   Loading Ramdisk to 9ea16000, end 9eb9a0b7 ... OK
   Loading Device Tree to 9ea0c000, end 9ea15f9e ... OK

Starting kernel ...

  
 
 
Understanding Memory-map ast2500
--------------------------------

root@evb-ast2500:~# cat /proc/cpu
cpu/     cpuinfo
root@evb-ast2500:~# cat /proc/cpuinfo
processor       : 0
model name      : ARMv6-compatible processor rev 7 (v6l)
BogoMIPS        : 49.50
Features        : half thumb fastmult edsp java tls
CPU implementer : 0x41
CPU architecture: 7
CPU variant     : 0x0
CPU part        : 0xb76
CPU revision    : 7

Hardware        : Generic DT based system
Revision        : 0000
Serial          : 0000000000000000
root@evb-ast2500:~#




using pr_debug:
----------------
echo 8 > /proc/sys/kernel/printk





using FTRACE :
------------------
CONFIG_FUNCTION_TRACER
CONFIG_FUNCTION_GRAPH_TRACER
CONFIG_STACK_TRACER
CONFIG_DYNAMIC_FTRACE
/sys/kernel/debug/tracing  ---> is crated in debugfs when Ftrace is configured .

root@evb-ast2500:/sys/kernel/debug/tracing# cat available_tracers
function_graph function nop


root@evb-ast2500:/sys/kernel/debug/tracing# cat current_tracer
nop
root@evb-ast2500:/sys/kernel/debug/tracing# echo function > current_tracer
root@evb-ast2500:/sys/kernel/debug/tracing#
root@evb-ast2500:/sys/kernel/debug/tracing# cat current_tracer
function
root@evb-ast2500:/sys/kernel/debug/tracing#



root@evb-ast2500:/sys/kernel/debug/tracing# cat trace | head -n25
# tracer: function
#
# entries-in-buffer/entries-written: 72020/741175   #P:1
#
#                              _-----=> irqs-off
#                             / _----=> need-resched
#                            | / _---=> hardirq/softirq
#                            || / _--=> preempt-depth
#                            ||| /     delay
#           TASK-PID   CPU#  ||||    TIMESTAMP  FUNCTION
#              | |       |   ||||       |         |
             cat-1074  [000] ....   393.134185: handle_mm_fault <-do_page_fault
             cat-1074  [000] ....   393.134190: ptep_set_access_flags <-handle_mm_fault
             cat-1074  [000] ....   393.134193: __sync_icache_dcache <-ptep_set_access_flags
             cat-1074  [000] ....   393.134196: up_read <-do_page_fault
             cat-1074  [000] d...   393.134203: do_DataAbort <-__dabt_usr
             cat-1074  [000] d...   393.134205: do_page_fault <-do_DataAbort
             cat-1074  [000] ....   393.134207: down_read_trylock <-do_page_fault
             cat-1074  [000] ....   393.134209: find_vma <-do_page_fault
             cat-1074  [000] ....   393.134210: vmacache_find <-find_vma
             cat-1074  [000] ....   393.134212: vmacache_update <-find_vma
             cat-1074  [000] ....   393.134214: handle_mm_fault <-do_page_fault
             cat-1074  [000] ....   393.134217: ptep_set_access_flags <-handle_mm_fault
             cat-1074  [000] ....   393.134219: __sync_icache_dcache <-ptep_set_access_flags
             cat-1074  [000] ....   393.134220: up_read <-do_page_fault


root@evb-ast2500:/sys/kernel/debug/tracing# cat trace |  tail -n10
             cat-1083  [000] ....   474.924206: seq_open <-__seq_open_private
             cat-1083  [000] ....   474.924209: kmem_cache_alloc <-seq_open
             cat-1083  [000] ....   474.924211: should_failslab <-kmem_cache_alloc
             cat-1083  [000] ....   474.924214: __mutex_init <-seq_open
             cat-1083  [000] ....   474.924218: kmem_cache_alloc_trace <-tracing_open
             cat-1083  [000] ....   474.924220: should_failslab <-kmem_cache_alloc_trace
             cat-1083  [000] ....   474.924224: mutex_lock <-tracing_open
             cat-1083  [000] ....   474.924225: kmem_cache_alloc_trace <-tracing_open
             cat-1083  [000] ....   474.924227: should_failslab <-kmem_cache_alloc_trace
             cat-1083  [000] ....   474.924232: __mutex_init <-tracing_open

root@evb-ast2500:/sys/kernel/debug/tracing# cat available_tracers
function_graph function nop
root@evb-ast2500:/sys/kernel/debug/tracing# echo function_graph > current_tracer
root@evb-ast2500:/sys/kernel/debug/tracing# cat current_tracer
function_graph
root@evb-ast2500:/sys/kernel/debug/tracing# cat trace | head -n20
# tracer: function_graph
#
# CPU  DURATION                  FUNCTION CALLS
# |     |   |                     |   |   |   |
 0)   7.394 us    |          cap_capable();
 0) + 13.010 us   |        } /* cap_vm_enough_memory */
 0)   4.202 us    |        __vm_enough_memory();
 0)               |        vm_area_dup() {
 0)               |          kmem_cache_alloc() {
 0)   2.182 us    |            should_failslab();
 0)   6.949 us    |          }
 0) + 13.576 us   |        }
 0)               |        anon_vma_fork() {
 0)               |          anon_vma_clone() {
 0)               |            kmem_cache_alloc() {
 0)   2.141 us    |              should_failslab();
 0)   7.152 us    |            }
 0)   2.990 us    |            down_write();
 0)   4.525 us    |            anon_vma_interval_tree_insert();
 0)   2.505 us    |            up_write();
root@evb-ast2500:/sys/kernel/debug/tracing#


Using trace_printk():
-----------------------
 If you are debugging a high volume area such as the timer interrupt, the scheduler, or the network,
 printk() can lead to bogging down the system or can even create a live lock.

Ftrace introduces a new form of printk() called trace_printk(). It can be used just like printk(), 
and can also be used in any context (interrupt code, NMI code, and scheduler code). 
trace_printk():it does not output to the console. Instead it writes to the Ftrace ring buffer and can be read via the trace file.

Writing into the ring buffer with trace_printk() only takes around a tenth of a microsecond or so.
But using printk(), especially when writing to the serial console, may take several milliseconds per write.
The performance advantage of trace_printk() lets you record the most sensitive areas of the kernel with very little impact.

trace_printk() output will appear in any tracer, even the function and function graph tracers.



Enabling and disabling the trace :
------------------------------------
    [tracing]# echo 0 > tracing_on
    [tracing]# echo function_graph > current_tracer
    [tracing]# echo 1 > tracing_on; run_test; echo 0 > tracing_on










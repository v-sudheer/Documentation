
./scripts/checkpatch.pl submitting_diff   : to meet coding guide lines of linux kernel
./scripts/get_maintainer.pl <  submitting_diff :  to get addresses of MAINTAINERS.

divide the commit into several Hash tags such that each patch indicates seperate feature/concepts

git add drivers/tty/serial/8250/8250_ast2500_uart_dma.c
git commit -m "AST2500 DMA UART driver"

git add drivers/tty/serial/8250/Makefile drivers/tty/serial/8250/Kconfig
git commit -m "build configuration for AST2500 DMA UART driver"

git add arch/arm/boot/dts/aspeed-g5.dtsi arch/arm/boot/dts/aspeed-ast2500-evb.dts
git commit -m "DT nodes for AST2500 DMA UART driver"

git add  arch/arm/configs/aspeed_g5_defconfig MAINTAINERS
git commit -m "defconfig and MAINTAINERS updated for AST2500 DMA UART driver"

git add  Documentation/devicetree/bindings/serial/ast2500-dma-uart.txt
git commit -m "Documentation: DT bindings AST2500 DMA UART driver"  


Generating patches:

Git  format-patch   --cover-letter  --signoff  --to= <addr1> --to=<addr2> -<no of commits> --subject-prefix="patch" -o  <name of Directory for patches>
git  format-patch   --cover-letter  --signoff  --to=gregkh@linuxfoundation.org --to=jslaby@suse.com --to=joel@jms.id.au --to=andrew@aj.id.au --to=benh@kernel.crashing.org --to=robh+dt@kernel.org --to=mark.rutland@arm.com --to=shivahshankar.shankarnarayanrao@aspeedtech.com --to=sudheer.veliseti@aspeedtech.com --cc=linux-kernel@vger.kernel.org --cc=linux-serial@vger.kernel.org  --cc=devicetree@vger.kernel.org --cc=linux-aspeed@lists.ozlabs.org  -5 --subject-prefix="patch" -o  /home/vsudheer/uart_sdma_merge/Linux_community_push_dir/patchdir    

The perfect patch (https://www.ozlabs.org/~akpm/stuff/tpp.txt): 
-------------------
1: Delivery
===========
a) Patches are delivered via email only.  Downloading them from internet servers is a pain.
b) One patch per email, with the changelog in the body of the email.

subject of patch:
---------------------
  Example subject: [patch 2/5] ext2: improve scalability of bitmap searching.
Note that various people's patch receiving scripts will strip away Subject:text which is inside brackets [].
So you should place information which has no long-term relevance to the patch inside brackets.
This includes the word "patch" and any sequence numbering.The subsystem identifier("ext2:") should hence be outside brackets.
  
The Subject: should not be a filename.
Use different Subjects for each patch in a patch series.
Subject: should concisely describe the patch which that email contains.
Bear in mind that the Subject: of your email becomes a globally-unique identifier for that patch. 
Subject should includes mention of the subsystem which it affects.
 
3.Attribution of patch:
From: John Doe <jdoe@wherever.com> should be example very first line of the email.
Downstream tools will pick this up and jdoe will get the git "Author" line.

4: Changelog of patch:
----------------------
Bear in mind that the Subject and changelog which you provide will propagate all the way into the permanent kernel record.
So the changelog should describe the patch fully:
   - why the kernel needed patching
   - the overall design approach in the patch
   - implementation details
   - testing results

No need to mention what version of the kernel the patch applies to eg:("applies to 2.6.8-rc1")
Don't include text such as "this patch does ..." or "here is patch which   ...".
There's no point in telling us that it's a patch 
Do not refer to earlier patches when changelogging a new version of a  patch. Each iteration of the
   patch should contain a standalone changelog. 

e) Add a Signed-off-by: line, as per section 11 of the
   Documentation/SubmittingPatches file in the kernel tree.
Signed-off-by: implies that you had some part in the developent of the
patch, or that you handled it and passed it on to another developer for
merging.
If your role was purely review and/or testing, please use Acked-by: instead.
Sometimes we also use Cc: in a patch to keep particular individuals
abreast of the patch's status and to give them an opportunity to review it.


f)Most people's patch receiving scripts will treat a ^--- string as the
separator between the changelog and the patch itself.  You can use this to
ensure that any diffstat information is discarded when the patch is  applied:

Example:
	Another few #if/#ifdef cleanups, this time for the PPC architecture.

	Signed-off-by: <valdis.kletnieks@vt.edu>
	Signed-off-by: Andrew Morton <akpm@osdl.org>
	---

	 25-akpm/arch/ppc/kernel/process.c                    |    2 +-
	 25-akpm/arch/ppc/platforms/85xx/mpc85xx_cds_common.c |    2 +-
	 25-akpm/arch/ppc/syslib/ppc85xx_setup.c              |    4 ++--
	 3 files changed, 4 insertions(+), 4 deletions(-)

	--- 25/arch/ppc/kernel/process.c
	+++ 25/arch/ppc/kernel/process.c
	@@ -667,7 +667,7 @@ void show_stack(struct task_struct *tsk,

g) Non-changelog text:

   Sometimes you want to include text in the email which isn't designed to
   go into the changelog in the git repository.  Things like "this is already
   in Fred's tree" or "this is an updated version of last Friday's patch" or
   whatever.

   You should place such text below the "^---" separator so that it is
   auto-removed when being placed into the revision control system.

5: The diff
===========

a) Patches should be in `patch -p1' form:

  --- a/kernel/sched.c
  +++ b/kernel/sched.c

b) Make sure that your patches apply to the latest version of the kernel
   tree.  Either straight from Linus's git tree or from
   ftp://ftp.kernel.org/pub/linux/kernel/v2.6/snapshots/

c) When raising patches for -mm kernels it's generally best to base them on
   the latest Linus tree.  I'll work out any rejects/incompatibilities.  There
   are of course exceptions to this.

d) Ensure that your patch does not add new trailing whitespace.  The below
   script will fix up your patch by stripping off such whitespace.

	#!/bin/sh

	strip1()
	{
		TMP=$(mktemp /tmp/XXXXXX)
		cp "$1" "$TMP"
		sed -e '/^+/s/[ 	]*$//' <"$TMP" >"$1"
		rm "$TMP"
	}

	for i in "$@"
	do
		strip1 "$i"
	done


6: Patch series
===============

a) When sending a series of patches, number them in the Subject:s thusly:

	[patch 1/10] ext2: block allocation: frob the globnozzle
	[patch 2/10] ext2: block allocation: wash the pizza
	etc.

b) Some people like to introduce a patch series with an introductory email
   which doesn't actually carry a patch, such as:

	[patch 0/10] ext2: block allocation changes

   Please don't do this.  There is no facility in the git tree to carry
   changelog-only changesets such as this (or at least, we don't do that) so
   the information in the introductory email will be lost.

   So I end up copying and pasting your nice introduction into the
   changelog for the first patch, so it gets into git.  I'll follow it with
   the text

	This patch:

   and then I'll include the changelog for the first patch of the series.

   It would be preferred if the patch originators were to do this.

c) Try very hard to ensure that the kernel builds and runs correctly at
   every step of the patch series.  This requirement exists because of
   `git-bisect'.  If someone is doing a bisection search for a kernel bug and
   they land upon your won't-compile point partway through the exercise, they
   will be unhappy.

d) If your patch series includes non-runtime-affecting things such as
   cleanups, whitespace fixes, file renames, moving functions around, etc. then
   this work should be done in the initial patches in the series.  The
   functional changes should come later in the series.

   This is mainly so that reversion of problematic changes becomes simpler.

7: Overall
==========

a) Avoid MIME and attachements if possible.  Make sure that your email
   client does not wordwrap your patch.  Make sure that your email client does
   not replace tabs with spaces.

   Mail yourself a decent-sized patch and check that it still applies.

b) If all this still hopelessly fails then MIME attachments are an acceptable
   reluctant fallback.  You must ensure that the attached patches have
   text/plain mimetypes.




git send-email <patch1> <patch2>..<patch N>
git send-email 0000-cover-letter.patch 0002-build-configuration-for-AST2500-DMA-UART-driver.patch







git status

generated patch for both staged and unstaged changes:
git diff HEAD  > ~/uart_sdma_merge/linux_patches_dir/DMA_UART_diff.patch1

./scripts/checkpatch.pl  ~/uart_sdma_merge/linux_patches_dir/DMA_UART_diff.patch1
./scripts/checkpatch.pl  --fix  ~/uart_sdma_merge/linux_patches_dir/DMA_UART_diff.patch1

cp   DMA_UART_diff.patch1   DMA_UART_diff.patch2
vimdiff   DMA_UART_diff.patch1.EXPERIMENTAL-checkpatch-fixes DMA_UART_diff.patch2

git apply   ~/uart_sdma_merge/linux_patches_dir/DMA_UART_diff.patch2

git diff HEAD  > ~/uart_sdma_merge/linux_patches_dir/DMA_UART_diff.patch3


./scripts/checkpatch.pl  --fix  ~/uart_sdma_merge/linux_patches_dir/DMA_UART_diff.patch3
Manually fix the errors and warnings
tips that help manual fixing:
fold -s -w80 file  ---->   only split at whitespace (-s), using max line width of 80 characters (-w80). 
fold -s -w80   drivers/tty/serial/8250/8250_ast2500_uart_dma.c >  drivers/tty/serial/8250/8250_ast2500_uart_dma.c_fold

git diff HEAD  > ~/uart_sdma_merge/linux_patches_dir/DMA_UART_diff.patch4


perl -pi -e 's/^[\ \t]+|[\ \t]+$//g' [file]  ----> remove trailing and leading white spaces in source file
 


